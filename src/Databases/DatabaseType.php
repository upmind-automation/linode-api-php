<?php

// ---------------------------------------------------------------------
//
//  Copyright (C) 2018-2024 Artem Rodygin
//
//  You should have received a copy of the MIT License along with
//  this file. If not, see <https://opensource.org/licenses/MIT>.
//
// ---------------------------------------------------------------------

namespace Linode\Databases;

use Linode\Entity;

/**
 * Managed Database plan type object.
 *
 * @property string            $id         The ID representing the Managed Database node plan type.
 * @property string            $label      A human-readable string that describes each plan type. For display purposes only.
 * @property int               $memory     The amount of RAM allocated to Database created of this plan type. The value is
 *                                         represented in megabytes.
 * @property int               $disk       The amount of disk space set aside for Databases of this plan type. The value is
 *                                         represented in megabytes.
 * @property int               $vcpus      The integer of number CPUs allocated to databases of this plan type.
 * @property bool              $deprecated Whether this Database plan type has been deprecated and is no longer available.
 * @property string            $class      The compute class category.
 * @property DatabaseEngines[] $engines
 */
class DatabaseType extends Entity
{
    // Available fields.
    public const FIELD_ID         = 'id';
    public const FIELD_LABEL      = 'label';
    public const FIELD_MEMORY     = 'memory';
    public const FIELD_DISK       = 'disk';
    public const FIELD_VCPUS      = 'vcpus';
    public const FIELD_DEPRECATED = 'deprecated';
    public const FIELD_CLASS      = 'class';
    public const FIELD_ENGINES    = 'engines';

    /**
     * @codeCoverageIgnore This method was autogenerated.
     */
    public function __get(string $name): mixed
    {
        return match ($name) {
            self::FIELD_ENGINES => new DatabaseEngines($this->client, $this->data[$name]),
            default             => parent::__get($name),
        };
    }
}
