<?php

// ---------------------------------------------------------------------
//
//  Copyright (C) 2018-2024 Artem Rodygin
//
//  You should have received a copy of the MIT License along with
//  this file. If not, see <https://opensource.org/licenses/MIT>.
//
// ---------------------------------------------------------------------

namespace Linode\Databases\Repository;

use Linode\Databases\DatabaseBackup;
use Linode\Databases\DatabaseCredentials;
use Linode\Databases\DatabaseMySQL;
use Linode\Databases\DatabaseMySQLRepositoryInterface;
use Linode\Databases\DatabaseSSL;
use Linode\Entity;
use Linode\Internal\AbstractRepository;

/**
 * @codeCoverageIgnore This class was autogenerated.
 */
class DatabaseMySQLRepository extends AbstractRepository implements DatabaseMySQLRepositoryInterface
{
    public function postDatabasesMySQLInstances(array $parameters = []): DatabaseMySQL
    {
        $response = $this->client->post($this->getBaseUri(), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new DatabaseMySQL($this->client, $json);
    }

    public function putDatabasesMySQLInstance(int $instanceId, array $parameters = []): DatabaseMySQL
    {
        $response = $this->client->put(sprintf('%s/%s', $this->getBaseUri(), $instanceId), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new DatabaseMySQL($this->client, $json);
    }

    public function deleteDatabasesMySQLInstance(int $instanceId): void
    {
        $this->client->delete(sprintf('%s/%s', $this->getBaseUri(), $instanceId));
    }

    public function getDatabasesMySQLInstanceBackups(int $instanceId): array
    {
        $response = $this->client->get(sprintf('%s/%s/backups', $this->getBaseUri(), $instanceId));
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return array_map(fn ($data) => new DatabaseBackup($this->client, $data), $json['data']);
    }

    public function postDatabasesMySQLInstanceBackup(int $instanceId, array $parameters = []): void
    {
        $this->client->post(sprintf('%s/%s/backups', $this->getBaseUri(), $instanceId), $parameters);
    }

    public function getDatabasesMySQLInstanceBackup(int $instanceId, int $backupId): DatabaseBackup
    {
        $response = $this->client->get(sprintf('%s/%s/backups/%s', $this->getBaseUri(), $instanceId, $backupId));
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new DatabaseBackup($this->client, $json);
    }

    public function deleteDatabaseMySQLInstanceBackup(int $instanceId, int $backupId): void
    {
        $this->client->delete(sprintf('%s/%s/backups/%s', $this->getBaseUri(), $instanceId, $backupId));
    }

    public function postDatabasesMySQLInstanceBackupRestore(int $instanceId, int $backupId): void
    {
        $this->client->post(sprintf('%s/%s/backups/%s/restore', $this->getBaseUri(), $instanceId, $backupId));
    }

    public function getDatabasesMySQLInstanceCredentials(int $instanceId): DatabaseCredentials
    {
        $response = $this->client->get(sprintf('%s/%s/credentials', $this->getBaseUri(), $instanceId));
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new DatabaseCredentials($this->client, $json);
    }

    public function postDatabasesMySQLInstanceCredentialsReset(int $instanceId): void
    {
        $this->client->post(sprintf('%s/%s/credentials/reset', $this->getBaseUri(), $instanceId));
    }

    public function getDatabasesMySQLInstanceSSL(int $instanceId): DatabaseSSL
    {
        $response = $this->client->get(sprintf('%s/%s/ssl', $this->getBaseUri(), $instanceId));
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new DatabaseSSL($this->client, $json);
    }

    public function postDatabasesMySQLInstancePatch(int $instanceId): void
    {
        $this->client->post(sprintf('%s/%s/patch', $this->getBaseUri(), $instanceId));
    }

    protected function getBaseUri(): string
    {
        return 'beta/databases/mysql/instances';
    }

    protected function getSupportedFields(): array
    {
        return [
            DatabaseMySQL::FIELD_ID,
            DatabaseMySQL::FIELD_LABEL,
            DatabaseMySQL::FIELD_REGION,
            DatabaseMySQL::FIELD_TYPE,
            DatabaseMySQL::FIELD_TOTAL_DISK_SIZE_GB,
            DatabaseMySQL::FIELD_USED_DISK_SIZE_GB,
            DatabaseMySQL::FIELD_CLUSTER_SIZE,
            DatabaseMySQL::FIELD_ENGINE,
            DatabaseMySQL::FIELD_VERSION,
            DatabaseMySQL::FIELD_PORT,
            DatabaseMySQL::FIELD_REPLICATION_TYPE,
            DatabaseMySQL::FIELD_STATUS,
            DatabaseMySQL::FIELD_ENCRYPTED,
            DatabaseMySQL::FIELD_ALLOW_LIST,
            DatabaseMySQL::FIELD_HOSTS,
            DatabaseMySQL::FIELD_SSL_CONNECTION,
            DatabaseMySQL::FIELD_CREATED,
            DatabaseMySQL::FIELD_UPDATED,
            DatabaseMySQL::FIELD_UPDATES,
        ];
    }

    protected function jsonToEntity(array $json): Entity
    {
        return new DatabaseMySQL($this->client, $json);
    }
}
