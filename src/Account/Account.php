<?php

// ---------------------------------------------------------------------
//
//  Copyright (C) 2018-2024 Artem Rodygin
//
//  You should have received a copy of the MIT License along with
//  this file. If not, see <https://opensource.org/licenses/MIT>.
//
// ---------------------------------------------------------------------

namespace Linode\Account;

use Linode\Account\Repository\EventRepository;
use Linode\Account\Repository\InvoiceRepository;
use Linode\Account\Repository\NotificationRepository;
use Linode\Account\Repository\OAuthClientRepository;
use Linode\Account\Repository\PaymentRepository;
use Linode\Account\Repository\UserRepository;
use Linode\Exception\LinodeException;
use Linode\LinodeClient;
use Linode\Longview\LongviewClientRepositoryInterface;
use Linode\Longview\Repository\LongviewClientRepository;
use Linode\Managed\ManagedContactRepositoryInterface;
use Linode\Managed\ManagedCredentialRepositoryInterface;
use Linode\Managed\ManagedIssueRepositoryInterface;
use Linode\Managed\ManagedLinodeSettingsRepositoryInterface;
use Linode\Managed\ManagedServiceRepositoryInterface;
use Linode\Managed\Repository\ManagedContactRepository;
use Linode\Managed\Repository\ManagedCredentialRepository;
use Linode\Managed\Repository\ManagedIssueRepository;
use Linode\Managed\Repository\ManagedLinodeSettingsRepository;
use Linode\Managed\Repository\ManagedServiceRepository;
use Linode\RepositoryInterface;

/**
 * Current user account.
 *
 * @property EventRepositoryInterface                 $events
 * @property InvoiceRepositoryInterface               $invoices
 * @property LongviewClientRepositoryInterface        $longviews_clients
 * @property ManagedContactRepositoryInterface        $managed_contacts
 * @property ManagedCredentialRepositoryInterface     $managed_credentials
 * @property ManagedIssueRepositoryInterface          $managed_issues
 * @property ManagedLinodeSettingsRepositoryInterface $managed_linode_settings
 * @property ManagedServiceRepositoryInterface        $managed_services
 * @property NotificationRepositoryInterface          $notifications
 * @property OAuthClientRepositoryInterface           $oauth_clients
 * @property PaymentRepositoryInterface               $payments
 * @property UserRepositoryInterface                  $users
 */
class Account
{
    /**
     * Account constructor.
     *
     * @param LinodeClient $client linode API client
     */
    public function __construct(protected LinodeClient $client) {}

    /**
     * @codeCoverageIgnore This method was autogenerated.
     */
    public function __get(string $name): ?RepositoryInterface
    {
        return match ($name) {
            'events'                  => new EventRepository($this->client),
            'invoices'                => new InvoiceRepository($this->client),
            'longviews_clients'       => new LongviewClientRepository($this->client),
            'managed_contacts'        => new ManagedContactRepository($this->client),
            'managed_credentials'     => new ManagedCredentialRepository($this->client),
            'managed_issues'          => new ManagedIssueRepository($this->client),
            'managed_linode_settings' => new ManagedLinodeSettingsRepository($this->client),
            'managed_services'        => new ManagedServiceRepository($this->client),
            'notifications'           => new NotificationRepository($this->client),
            'oauth_clients'           => new OAuthClientRepository($this->client),
            'payments'                => new PaymentRepository($this->client),
            'users'                   => new UserRepository($this->client),
            default                   => null,
        };
    }

    /**
     * Returns the contact and billing information related to your Account.
     *
     * @throws LinodeException
     */
    public function getAccountInformation(): AccountInformation
    {
        $response = $this->client->get('/account');
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new AccountInformation($this->client, $json);
    }

    /**
     * Updates contact and billing information related to your Account.
     *
     * @throws LinodeException
     */
    public function setAccountInformation(array $parameters): AccountInformation
    {
        $response = $this->client->put('/account', $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new AccountInformation($this->client, $json);
    }

    /**
     * Cancels an active Linode account. This action will cause
     * Linode to attempt to charge the credit card on file for the remaining
     * balance. An error will occur if Linode fails to charge the credit card
     * on file. Restricted users will not be able to cancel an account.
     *
     * @param null|string $comments any reason for cancelling the account, and any other comments
     *                              you might have about your Linode service
     *
     * @return string a link to Linode's exit survey
     *
     * @throws LinodeException
     */
    public function cancel(?string $comments = null): string
    {
        $parameters = [
            'comments' => $comments,
        ];

        $response = $this->client->post('/account/cancel', $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return $json['survey_link'];
    }

    /**
     * Adds/edit credit card information to your Account.
     *
     * Only one credit card can be associated with your Account, so using this
     * endpoint will overwrite your currently active card information with the
     * new credit card.
     *
     * @param string $card_number  your credit card number (no spaces or dashes allowed)
     * @param string $expiry_month a value from 1-12 representing the expiration month of your credit card
     * @param string $expiry_year  a four-digit integer representing the expiration year of your credit card
     * @param string $cvv          the Card Verification Value on the back of the card
     *
     * @throws LinodeException
     */
    public function updateCreditCard(string $card_number, string $expiry_month, string $expiry_year, string $cvv): void
    {
        $parameters = [
            'card_number'  => $card_number,
            'expiry_month' => $expiry_month,
            'expiry_year'  => $expiry_year,
            'cvv'          => $cvv,
        ];

        $this->client->post('/account/credit-card', $parameters);
    }

    /**
     * Returns information related to your Account settings: Managed service
     * subscription, Longview subscription, and network helper.
     *
     * @throws LinodeException
     */
    public function getAccountSettings(): AccountSettings
    {
        $response = $this->client->get('/account/settings');
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new AccountSettings($this->client, $json);
    }

    /**
     * Updates your Account settings.
     *
     * @throws LinodeException
     */
    public function setAccountSettings(array $parameters): AccountSettings
    {
        $response = $this->client->put('/account/settings', $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new AccountSettings($this->client, $json);
    }

    /**
     * Returns a Transfer object showing your network utilization, in GB, for the current month.
     *
     * @throws LinodeException
     */
    public function getNetworkUtilization(): NetworkUtilization
    {
        $response = $this->client->get('/account/transfer');
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new NetworkUtilization($this->client, $json);
    }
}
