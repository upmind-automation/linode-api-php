<?php

// ---------------------------------------------------------------------
//
//  Copyright (C) 2018-2024 Artem Rodygin
//
//  You should have received a copy of the MIT License along with
//  this file. If not, see <https://opensource.org/licenses/MIT>.
//
// ---------------------------------------------------------------------

namespace Linode\Account\Repository;

use Linode\Account\EntityTransfer;
use Linode\Account\EntityTransferRepositoryInterface;
use Linode\Entity;
use Linode\Internal\AbstractRepository;

/**
 * @codeCoverageIgnore This class was autogenerated.
 */
class EntityTransferRepository extends AbstractRepository implements EntityTransferRepositoryInterface
{
    public function createEntityTransfer(array $parameters = []): EntityTransfer
    {
        $response = $this->client->post($this->getBaseUri(), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new EntityTransfer($this->client, $json);
    }

    public function deleteEntityTransfer(string $token): void
    {
        $this->client->delete(sprintf('%s/%s', $this->getBaseUri(), $token));
    }

    public function acceptEntityTransfer(string $token): void
    {
        $this->client->post(sprintf('%s/%s/accept', $this->getBaseUri(), $token));
    }

    protected function getBaseUri(): string
    {
        return '/account/entity-transfers';
    }

    protected function getSupportedFields(): array
    {
        return [
            EntityTransfer::FIELD_TOKEN,
            EntityTransfer::FIELD_STATUS,
            EntityTransfer::FIELD_EXPIRY,
            EntityTransfer::FIELD_IS_SENDER,
            EntityTransfer::FIELD_CREATED,
            EntityTransfer::FIELD_UPDATED,
            EntityTransfer::FIELD_ENTITIES,
        ];
    }

    protected function jsonToEntity(array $json): Entity
    {
        return new EntityTransfer($this->client, $json);
    }
}
