<?php

// ---------------------------------------------------------------------
//
//  Copyright (C) 2018-2024 Artem Rodygin
//
//  You should have received a copy of the MIT License along with
//  this file. If not, see <https://opensource.org/licenses/MIT>.
//
// ---------------------------------------------------------------------

namespace Linode\Account;

use Linode\Entity;

/**
 * A structure representing all grants a restricted User has on the Account. Not
 * available for unrestricted users, as they have access to everything without
 * grants. If retrieved from the `/profile/grants` endpoint, entities to which a User
 * has no access will be omitted.
 *
 * @property GlobalGrant $global       A structure containing the Account-level grants a User has.
 * @property Grant[]     $linode       The grants this User has for each Linode that is owned by this Account.
 * @property Grant[]     $database     The grants this User has for each Database that is owned by this Account.
 * @property Grant[]     $domain       The grants this User has for each Domain that is owned by this Account.
 * @property Grant[]     $nodebalancer The grants this User has for each NodeBalancer that is owned by this Account.
 * @property Grant[]     $image        The grants this User has for each Image that is owned by this Account.
 * @property Grant[]     $longview     The grants this User has for each Longview Client that is owned by this Account.
 * @property Grant[]     $stackscript  The grants this User has for each StackScript that is owned by this Account.
 * @property Grant[]     $volume       The grants this User has for each Block Storage Volume that is owned by this
 *                                     Account.
 */
class GrantsResponse extends Entity
{
    // Available fields.
    public const FIELD_GLOBAL       = 'global';
    public const FIELD_LINODE       = 'linode';
    public const FIELD_DATABASE     = 'database';
    public const FIELD_DOMAIN       = 'domain';
    public const FIELD_NODEBALANCER = 'nodebalancer';
    public const FIELD_IMAGE        = 'image';
    public const FIELD_LONGVIEW     = 'longview';
    public const FIELD_STACKSCRIPT  = 'stackscript';
    public const FIELD_VOLUME       = 'volume';

    /**
     * @codeCoverageIgnore This method was autogenerated.
     */
    public function __get(string $name): mixed
    {
        return match ($name) {
            self::FIELD_GLOBAL => new GlobalGrant($this->client, $this->data[$name]),
            default            => array_map(fn ($data) => new Grant($this->client, $data), $this->data[$name]),
        };
    }
}
