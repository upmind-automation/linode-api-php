<?php

// ---------------------------------------------------------------------
//
//  Copyright (C) 2018-2024 Artem Rodygin
//
//  You should have received a copy of the MIT License along with
//  this file. If not, see <https://opensource.org/licenses/MIT>.
//
// ---------------------------------------------------------------------

namespace Linode\VPC\Repository;

use Linode\Entity;
use Linode\Internal\AbstractRepository;
use Linode\LinodeClient;
use Linode\VPC\VPCSubnet;
use Linode\VPC\VPCSubnetRepositoryInterface;

/**
 * @codeCoverageIgnore This class was autogenerated.
 */
class VPCSubnetRepository extends AbstractRepository implements VPCSubnetRepositoryInterface
{
    /**
     * @param int $vpcId The `id` of the VPC.
     */
    public function __construct(LinodeClient $client, protected int $vpcId)
    {
        parent::__construct($client);
    }

    public function createVPCSubnet(array $parameters = []): VPCSubnet
    {
        $response = $this->client->post($this->getBaseUri(), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new VPCSubnet($this->client, $json);
    }

    public function updateVPCSubnet(int $vpcSubnetId, array $parameters = []): VPCSubnet
    {
        $response = $this->client->put(sprintf('%s/%s', $this->getBaseUri(), $vpcSubnetId), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new VPCSubnet($this->client, $json);
    }

    public function deleteVPCSubnet(int $vpcSubnetId): void
    {
        $this->client->delete(sprintf('%s/%s', $this->getBaseUri(), $vpcSubnetId));
    }

    protected function getBaseUri(): string
    {
        return sprintf('/vpcs/%s/subnets', $this->vpcId);
    }

    protected function getSupportedFields(): array
    {
        return [
            VPCSubnet::FIELD_ID,
            VPCSubnet::FIELD_LABEL,
            VPCSubnet::FIELD_IPV4,
            VPCSubnet::FIELD_LINODES,
            VPCSubnet::FIELD_CREATED,
            VPCSubnet::FIELD_UPDATED,
        ];
    }

    protected function jsonToEntity(array $json): Entity
    {
        return new VPCSubnet($this->client, $json);
    }
}
