<?php

// ---------------------------------------------------------------------
//
//  Copyright (C) 2018-2024 Artem Rodygin
//
//  You should have received a copy of the MIT License along with
//  this file. If not, see <https://opensource.org/licenses/MIT>.
//
// ---------------------------------------------------------------------

namespace Linode\Managed\Repository;

use Linode\Entity;
use Linode\Internal\AbstractRepository;
use Linode\Managed\ManagedService;
use Linode\Managed\ManagedServiceRepositoryInterface;

/**
 * @codeCoverageIgnore This class was autogenerated.
 */
class ManagedServiceRepository extends AbstractRepository implements ManagedServiceRepositoryInterface
{
    public function createManagedService(array $parameters = []): ManagedService
    {
        $response = $this->client->post($this->getBaseUri(), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new ManagedService($this->client, $json);
    }

    public function updateManagedService(int $serviceId, array $parameters = []): ManagedService
    {
        $response = $this->client->put(sprintf('%s/%s', $this->getBaseUri(), $serviceId), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new ManagedService($this->client, $json);
    }

    public function deleteManagedService(int $serviceId): void
    {
        $this->client->delete(sprintf('%s/%s', $this->getBaseUri(), $serviceId));
    }

    public function disableManagedService(int $serviceId): ManagedService
    {
        $response = $this->client->post(sprintf('%s/%s/disable', $this->getBaseUri(), $serviceId));
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new ManagedService($this->client, $json);
    }

    public function enableManagedService(int $serviceId): ManagedService
    {
        $response = $this->client->post(sprintf('%s/%s/enable', $this->getBaseUri(), $serviceId));
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new ManagedService($this->client, $json);
    }

    protected function getBaseUri(): string
    {
        return '/managed/services';
    }

    protected function getSupportedFields(): array
    {
        return [
            ManagedService::FIELD_ID,
            ManagedService::FIELD_STATUS,
            ManagedService::FIELD_SERVICE_TYPE,
            ManagedService::FIELD_LABEL,
            ManagedService::FIELD_ADDRESS,
            ManagedService::FIELD_CONSULTATION_GROUP,
            ManagedService::FIELD_TIMEOUT,
            ManagedService::FIELD_BODY,
            ManagedService::FIELD_NOTES,
            ManagedService::FIELD_REGION,
            ManagedService::FIELD_CREDENTIALS,
            ManagedService::FIELD_CREATED,
            ManagedService::FIELD_UPDATED,
        ];
    }

    protected function jsonToEntity(array $json): Entity
    {
        return new ManagedService($this->client, $json);
    }
}
