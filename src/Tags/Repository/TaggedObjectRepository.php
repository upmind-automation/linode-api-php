<?php

// ---------------------------------------------------------------------
//
//  Copyright (C) 2018-2024 Artem Rodygin
//
//  You should have received a copy of the MIT License along with
//  this file. If not, see <https://opensource.org/licenses/MIT>.
//
// ---------------------------------------------------------------------

namespace Linode\Tags\Repository;

use Linode\Domains\Domain;
use Linode\Entity;
use Linode\Internal\AbstractRepository;
use Linode\Linode\LinodeEntity;
use Linode\LinodeClient;
use Linode\LinodeInstances\Linode;
use Linode\NodeBalancers\NodeBalancer;
use Linode\Tags\Tag;
use Linode\Tags\TaggedObjectRepositoryInterface;
use Linode\Volumes\Volume;

/**
 * @codeCoverageIgnore This class was autogenerated.
 */
class TaggedObjectRepository extends AbstractRepository implements TaggedObjectRepositoryInterface
{
    /**
     * @param string $label The Label of the Tag we are accessing Objects for.
     */
    public function __construct(LinodeClient $client, protected string $label)
    {
        parent::__construct($client);
    }

    protected function getBaseUri(): string
    {
        return sprintf('/tags/%s', $this->label);
    }

    protected function getSupportedFields(): array
    {
        return [
            Tag::FIELD_TYPE,
        ];
    }

    protected function jsonToEntity(array $json): Entity
    {
        return match ($json[Tag::FIELD_TYPE]) {
            LinodeEntity::TYPE_DOMAIN       => new Domain($this->client, $json['data']),
            LinodeEntity::TYPE_LINODE       => new Linode($this->client, $json['data']),
            LinodeEntity::TYPE_NODEBALANCER => new NodeBalancer($this->client, $json['data']),
            LinodeEntity::TYPE_VOLUME       => new Volume($this->client, $json['data']),
        };
    }
}
