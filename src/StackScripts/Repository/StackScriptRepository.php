<?php

// ---------------------------------------------------------------------
//
//  Copyright (C) 2018-2024 Artem Rodygin
//
//  You should have received a copy of the MIT License along with
//  this file. If not, see <https://opensource.org/licenses/MIT>.
//
// ---------------------------------------------------------------------

namespace Linode\StackScripts\Repository;

use Linode\Entity;
use Linode\Internal\AbstractRepository;
use Linode\StackScripts\StackScript;
use Linode\StackScripts\StackScriptRepositoryInterface;

/**
 * @codeCoverageIgnore This class was autogenerated.
 */
class StackScriptRepository extends AbstractRepository implements StackScriptRepositoryInterface
{
    public function addStackScript(array $parameters = []): StackScript
    {
        $response = $this->client->post($this->getBaseUri(), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new StackScript($this->client, $json);
    }

    public function updateStackScript(int $stackscriptId, array $parameters = []): StackScript
    {
        $response = $this->client->put(sprintf('%s/%s', $this->getBaseUri(), $stackscriptId), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new StackScript($this->client, $json);
    }

    public function deleteStackScript(int $stackscriptId): void
    {
        $this->client->delete(sprintf('%s/%s', $this->getBaseUri(), $stackscriptId));
    }

    protected function getBaseUri(): string
    {
        return '/linode/stackscripts';
    }

    protected function getSupportedFields(): array
    {
        return [
            StackScript::FIELD_ID,
            StackScript::FIELD_USERNAME,
            StackScript::FIELD_LABEL,
            StackScript::FIELD_IMAGES,
            StackScript::FIELD_IS_PUBLIC,
            StackScript::FIELD_CREATED,
            StackScript::FIELD_UPDATED,
            StackScript::FIELD_USER_GRAVATAR_ID,
            StackScript::FIELD_DESCRIPTION,
            StackScript::FIELD_DEPLOYMENTS_TOTAL,
            StackScript::FIELD_DEPLOYMENTS_ACTIVE,
            StackScript::FIELD_REV_NOTE,
            StackScript::FIELD_SCRIPT,
            StackScript::FIELD_USER_DEFINED_FIELDS,
            StackScript::FIELD_MINE,
        ];
    }

    protected function jsonToEntity(array $json): Entity
    {
        return new StackScript($this->client, $json);
    }
}
