<?php

// ---------------------------------------------------------------------
//
//  Copyright (C) 2018-2024 Artem Rodygin
//
//  You should have received a copy of the MIT License along with
//  this file. If not, see <https://opensource.org/licenses/MIT>.
//
// ---------------------------------------------------------------------

namespace Linode\Domains\Repository;

use Linode\Domains\DomainRecord;
use Linode\Domains\DomainRecordRepositoryInterface;
use Linode\Entity;
use Linode\Internal\AbstractRepository;
use Linode\LinodeClient;

/**
 * @codeCoverageIgnore This class was autogenerated.
 */
class DomainRecordRepository extends AbstractRepository implements DomainRecordRepositoryInterface
{
    /**
     * @param int $domainId The ID of the Domain we are accessing Records for.
     */
    public function __construct(LinodeClient $client, protected int $domainId)
    {
        parent::__construct($client);
    }

    public function createDomainRecord(array $parameters = []): DomainRecord
    {
        $response = $this->client->post($this->getBaseUri(), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new DomainRecord($this->client, $json);
    }

    public function updateDomainRecord(int $recordId, array $parameters = []): DomainRecord
    {
        $response = $this->client->put(sprintf('%s/%s', $this->getBaseUri(), $recordId), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new DomainRecord($this->client, $json);
    }

    public function deleteDomainRecord(int $recordId): void
    {
        $this->client->delete(sprintf('%s/%s', $this->getBaseUri(), $recordId));
    }

    protected function getBaseUri(): string
    {
        return sprintf('/domains/%s/records', $this->domainId);
    }

    protected function getSupportedFields(): array
    {
        return [
            DomainRecord::FIELD_ID,
            DomainRecord::FIELD_TYPE,
            DomainRecord::FIELD_NAME,
            DomainRecord::FIELD_TARGET,
            DomainRecord::FIELD_TTL_SEC,
            DomainRecord::FIELD_PRIORITY,
            DomainRecord::FIELD_WEIGHT,
            DomainRecord::FIELD_SERVICE,
            DomainRecord::FIELD_PROTOCOL,
            DomainRecord::FIELD_PORT,
            DomainRecord::FIELD_TAG,
            DomainRecord::FIELD_CREATED,
            DomainRecord::FIELD_UPDATED,
        ];
    }

    protected function jsonToEntity(array $json): Entity
    {
        return new DomainRecord($this->client, $json);
    }
}
