<?php

// ---------------------------------------------------------------------
//
//  Copyright (C) 2018-2024 Artem Rodygin
//
//  You should have received a copy of the MIT License along with
//  this file. If not, see <https://opensource.org/licenses/MIT>.
//
// ---------------------------------------------------------------------

namespace Linode\Domains\Repository;

use Linode\Domains\Domain;
use Linode\Domains\DomainRepositoryInterface;
use Linode\Entity;
use Linode\Internal\AbstractRepository;

/**
 * @codeCoverageIgnore This class was autogenerated.
 */
class DomainRepository extends AbstractRepository implements DomainRepositoryInterface
{
    public function createDomain(array $parameters = []): Domain
    {
        $response = $this->client->post($this->getBaseUri(), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new Domain($this->client, $json);
    }

    public function updateDomain(int $domainId, array $parameters = []): Domain
    {
        $response = $this->client->put(sprintf('%s/%s', $this->getBaseUri(), $domainId), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new Domain($this->client, $json);
    }

    public function deleteDomain(int $domainId): void
    {
        $this->client->delete(sprintf('%s/%s', $this->getBaseUri(), $domainId));
    }

    public function importDomain(string $domain, string $remote_nameserver): Domain
    {
        $parameters = [
            'domain'            => $domain,
            'remote_nameserver' => $remote_nameserver,
        ];

        $response = $this->client->post(sprintf('%s/import', $this->getBaseUri()), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new Domain($this->client, $json);
    }

    public function cloneDomain(int $domainId, string $domain): Domain
    {
        $parameters = [
            'domain' => $domain,
        ];

        $response = $this->client->post(sprintf('%s/%s/clone', $this->getBaseUri(), $domainId), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new Domain($this->client, $json);
    }

    protected function getBaseUri(): string
    {
        return '/domains';
    }

    protected function getSupportedFields(): array
    {
        return [
            Domain::FIELD_ID,
            Domain::FIELD_DOMAIN,
            Domain::FIELD_TYPE,
            Domain::FIELD_STATUS,
            Domain::FIELD_SOA_EMAIL,
            Domain::FIELD_GROUP,
            Domain::FIELD_DESCRIPTION,
            Domain::FIELD_TTL_SEC,
            Domain::FIELD_REFRESH_SEC,
            Domain::FIELD_RETRY_SEC,
            Domain::FIELD_EXPIRE_SEC,
            Domain::FIELD_MASTER_IPS,
            Domain::FIELD_AXFR_IPS,
            Domain::FIELD_TAGS,
        ];
    }

    protected function jsonToEntity(array $json): Entity
    {
        return new Domain($this->client, $json);
    }
}
