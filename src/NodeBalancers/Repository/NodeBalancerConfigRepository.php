<?php

// ---------------------------------------------------------------------
//
//  Copyright (C) 2018-2024 Artem Rodygin
//
//  You should have received a copy of the MIT License along with
//  this file. If not, see <https://opensource.org/licenses/MIT>.
//
// ---------------------------------------------------------------------

namespace Linode\NodeBalancers\Repository;

use Linode\Entity;
use Linode\Internal\AbstractRepository;
use Linode\LinodeClient;
use Linode\NodeBalancers\NodeBalancerConfig;
use Linode\NodeBalancers\NodeBalancerConfigRepositoryInterface;

/**
 * @codeCoverageIgnore This class was autogenerated.
 */
class NodeBalancerConfigRepository extends AbstractRepository implements NodeBalancerConfigRepositoryInterface
{
    /**
     * @param int $nodeBalancerId The ID of the NodeBalancer to access.
     */
    public function __construct(LinodeClient $client, protected int $nodeBalancerId)
    {
        parent::__construct($client);
    }

    public function createNodeBalancerConfig(array $parameters = []): NodeBalancerConfig
    {
        $response = $this->client->post($this->getBaseUri(), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new NodeBalancerConfig($this->client, $json);
    }

    public function updateNodeBalancerConfig(int $configId, array $parameters = []): NodeBalancerConfig
    {
        $response = $this->client->put(sprintf('%s/%s', $this->getBaseUri(), $configId), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new NodeBalancerConfig($this->client, $json);
    }

    public function deleteNodeBalancerConfig(int $configId): void
    {
        $this->client->delete(sprintf('%s/%s', $this->getBaseUri(), $configId));
    }

    public function rebuildNodeBalancerConfig(int $configId, array $parameters = []): NodeBalancerConfig
    {
        $response = $this->client->post(sprintf('%s/%s/rebuild', $this->getBaseUri(), $configId), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new NodeBalancerConfig($this->client, $json);
    }

    protected function getBaseUri(): string
    {
        return sprintf('/nodebalancers/%s/configs', $this->nodeBalancerId);
    }

    protected function getSupportedFields(): array
    {
        return [
            NodeBalancerConfig::FIELD_ID,
            NodeBalancerConfig::FIELD_PORT,
            NodeBalancerConfig::FIELD_PROTOCOL,
            NodeBalancerConfig::FIELD_ALGORITHM,
            NodeBalancerConfig::FIELD_STICKINESS,
            NodeBalancerConfig::FIELD_CHECK,
            NodeBalancerConfig::FIELD_CHECK_INTERVAL,
            NodeBalancerConfig::FIELD_CHECK_TIMEOUT,
            NodeBalancerConfig::FIELD_CHECK_ATTEMPTS,
            NodeBalancerConfig::FIELD_CHECK_PATH,
            NodeBalancerConfig::FIELD_CHECK_BODY,
            NodeBalancerConfig::FIELD_CHECK_PASSIVE,
            NodeBalancerConfig::FIELD_CIPHER_SUITE,
            NodeBalancerConfig::FIELD_SSL_COMMONNAME,
            NodeBalancerConfig::FIELD_SSL_FINGERPRINT,
            NodeBalancerConfig::FIELD_SSL_CERT,
            NodeBalancerConfig::FIELD_SSL_KEY,
            NodeBalancerConfig::FIELD_NODES_STATUS,
            NodeBalancerConfig::FIELD_PROXY_PROTOCOL,
            NodeBalancerConfig::FIELD_NODEBALANCER_ID,
        ];
    }

    protected function jsonToEntity(array $json): Entity
    {
        return new NodeBalancerConfig($this->client, $json);
    }
}
