<?php

// ---------------------------------------------------------------------
//
//  Copyright (C) 2018-2024 Artem Rodygin
//
//  You should have received a copy of the MIT License along with
//  this file. If not, see <https://opensource.org/licenses/MIT>.
//
// ---------------------------------------------------------------------

namespace Linode\Networking\Repository;

use Linode\Entity;
use Linode\Internal\AbstractRepository;
use Linode\Networking\IPAddress;
use Linode\Networking\IPAddressRepositoryInterface;

/**
 * @codeCoverageIgnore This class was autogenerated.
 */
class IPAddressRepository extends AbstractRepository implements IPAddressRepositoryInterface
{
    public function allocateIP(array $parameters = []): IPAddress
    {
        $response = $this->client->post($this->getBaseUri(), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new IPAddress($this->client, $json);
    }

    public function updateIP(string $address, array $parameters = []): IPAddress
    {
        $response = $this->client->put(sprintf('%s/%s', $this->getBaseUri(), $address), $parameters);
        $contents = $response->getBody()->getContents();
        $json     = json_decode($contents, true);

        return new IPAddress($this->client, $json);
    }

    public function assignIPs(array $parameters = []): void
    {
        $this->client->post(sprintf('%s/assign', $this->getBaseUri()), $parameters);
    }

    public function shareIPs(array $parameters = []): void
    {
        $this->client->post(sprintf('%s/share', $this->getBaseUri()), $parameters);
    }

    public function assignIPv4s(array $parameters = []): void
    {
        $this->client->post('/networking/ipv4/assign', $parameters);
    }

    public function shareIPv4s(array $parameters = []): void
    {
        $this->client->post('/networking/ipv4/share', $parameters);
    }

    protected function getBaseUri(): string
    {
        return '/networking/ips';
    }

    protected function getSupportedFields(): array
    {
        return [
            IPAddress::FIELD_ADDRESS,
            IPAddress::FIELD_TYPE,
            IPAddress::FIELD_PUBLIC,
            IPAddress::FIELD_RDNS,
            IPAddress::FIELD_REGION,
            IPAddress::FIELD_LINODE_ID,
            IPAddress::FIELD_GATEWAY,
            IPAddress::FIELD_SUBNET_MASK,
            IPAddress::FIELD_PREFIX,
            IPAddress::FIELD_VPC_NAT_1_1,
        ];
    }

    protected function jsonToEntity(array $json): Entity
    {
        return new IPAddress($this->client, $json);
    }
}
