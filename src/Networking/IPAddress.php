<?php

// ---------------------------------------------------------------------
//
//  Copyright (C) 2018-2024 Artem Rodygin
//
//  You should have received a copy of the MIT License along with
//  this file. If not, see <https://opensource.org/licenses/MIT>.
//
// ---------------------------------------------------------------------

namespace Linode\Networking;

use Linode\Entity;

/**
 * An IP address that exists in Linode's system, either IPv4 or IPv6.
 *
 * @property string         $address     The IP address.
 * @property string         $type        The type of address this is.
 * @property bool           $public      Whether this is a public or private IP address.
 * @property null|string    $rdns        The reverse DNS assigned to this address. For public IPv4 addresses, this will be
 *                                       set to a default value provided by Linode if not explicitly set.
 * @property string         $region      The Region this IP address resides in.
 * @property int            $linode_id   The ID of the Linode this address currently belongs to. For IPv4 addresses, this
 *                                       is by default the Linode that this address was assigned to on creation, and these
 *                                       addresses my be moved using the /networking/ipv4/assign endpoint. For SLAAC and
 *                                       link-local addresses, this value may not be changed.
 * @property null|string    $gateway     The default gateway for this address.
 * @property string         $subnet_mask The mask that separates host bits from network bits for this address.
 * @property int            $prefix      The number of bits set in the subnet mask.
 * @property null|NATConfig $vpc_nat_1_1 IPv4 address configured as a 1:1 NAT for this Interface. If no address is
 *                                       configured as a 1:1 NAT, `null` is returned.
 *                                       **Note:** Only allowed for `vpc` type Interfaces.
 */
class IPAddress extends Entity
{
    // Available fields.
    public const FIELD_ADDRESS     = 'address';
    public const FIELD_TYPE        = 'type';
    public const FIELD_PUBLIC      = 'public';
    public const FIELD_RDNS        = 'rdns';
    public const FIELD_REGION      = 'region';
    public const FIELD_LINODE_ID   = 'linode_id';
    public const FIELD_GATEWAY     = 'gateway';
    public const FIELD_SUBNET_MASK = 'subnet_mask';
    public const FIELD_PREFIX      = 'prefix';
    public const FIELD_VPC_NAT_1_1 = 'vpc_nat_1_1';

    // Extra fields for POST/PUT requests.
    public const FIELD_IPS = 'ips';

    // `FIELD_TYPE` values.
    public const TYPE_IPV4       = 'ipv4';
    public const TYPE_IPV6       = 'ipv6';
    public const TYPE_IPV6_POOL  = 'ipv6/pool';
    public const TYPE_IPV6_RANGE = 'ipv6/range';

    /**
     * @codeCoverageIgnore This method was autogenerated.
     */
    public function __get(string $name): mixed
    {
        return match ($name) {
            self::FIELD_VPC_NAT_1_1 => null === $this->data[$name] ? null : new NATConfig($this->client, $this->data[$name]),
            default                 => parent::__get($name),
        };
    }
}
